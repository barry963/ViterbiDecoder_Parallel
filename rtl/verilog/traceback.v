///////////////////////////////////////////////////////////////////
         //////                                    //////
///////////////////////////////////////////////////////////////////
///                                                             ///
/// This file is generated by Viterbi HDL Code Generator(VHCG)  ///
/// which is written by Mike Johnson at OpenCores.org  and      ///
/// distributed under GPL license.                              ///
///                                                             ///
/// If you have any advice,                                     ///
/// please email to jhonson.zhu@gmail.com                       ///
///                                                             ///
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////



`include "glb_def.v"

// radix of output number of DECS of one traceback action. 
// It is equal U+OUT_STAGE_RADIX
`define OUT_NUM_RADIX   5 
// output number of DECS in one traceback action. 
// It is equal 2^(U+OUT_STAGE_RADIX) and larger than TRACE_LEN.
`define OUT_NUM         64 
// trace back length. `LEN MUST smaller than `OUT_NUM 
`define LEN 			64 
// output decs one trace back action, 2^OUT_STAGE_RADIX, equal TRACE_LEN/n, 1<n<=2^u
`define OUT 			32 
// the size of ram is 1024bits, letting it be pow of two makes address 
// generation work well.

// equal to 2^(w+v) 
`define DEC_NUM 		64 
// DEC_NUM*`V 

// n=`LEN/`OUT 
`define DUMMY_BLOCK_NUM 2 
// the width of count of dummy block
`define DUMMY_CNT_WIDTH 2 

// one byte includes 2^(w+v) decs, each dec is a v-bits vector
module traceback
(
    clk, 
    rst, 
    srst,
    valid_in,
    // dec0, 
    // dec1, 
    // dec2, 
    // dec3, 
    // dec4, 
    // dec5, 
    // dec6, 
    // dec7, 
    // dec8, 
    // dec9, 
    // dec10, 
    // dec11, 
    // dec12, 
    // dec13, 
    // dec14, 
    // dec15, 
    // dec16, 
    // dec17, 
    // dec18, 
    // dec19, 
    // dec20, 
    // dec21, 
    // dec22, 
    // dec23, 
    // dec24, 
    // dec25, 
    // dec26, 
    // dec27, 
    // dec28, 
    // dec29, 
    // dec30, 
    // dec31, 
    // dec32, 
    // dec33, 
    // dec34, 
    // dec35, 
    // dec36, 
    // dec37, 
    // dec38, 
    // dec39, 
    // dec40, 
    // dec41, 
    // dec42, 
    // dec43, 
    // dec44, 
    // dec45, 
    // dec46, 
    // dec47, 
    // dec48, 
    // dec49, 
    // dec50, 
    // dec51, 
    // dec52, 
    // dec53, 
    // dec54, 
    // dec55, 
    // dec56, 
    // dec57, 
    // dec58, 
    // dec59, 
    // dec60, 
    // dec61, 
    // dec62, 
    // dec63,
	dec_list,
	dec_start_state,	
	//sm_list,
    // sm0, 
    // sm1, 
    // sm2, 
    // sm3, 
    // sm4, 
    // sm5, 
    // sm6, 
    // sm7, 
    // sm8, 
    // sm9, 
    // sm10, 
    // sm11, 
    // sm12, 
    // sm13, 
    // sm14, 
    // sm15, 
    // sm16, 
    // sm17, 
    // sm18, 
    // sm19, 
    // sm20, 
    // sm21, 
    // sm22, 
    // sm23, 
    // sm24, 
    // sm25, 
    // sm26, 
    // sm27, 
    // sm28, 
    // sm29, 
    // sm30, 
    // sm31, 	
    wr_en, 
    wr_data, 
    wr_adr, 
    rd_en, 
    rd_data, 
    rd_adr, 
    en_filo_in, 
    filo_in
); 

input clk, rst, srst, valid_in;
// input[`V-1:0] dec0, dec1, dec2, dec3, dec4, dec5, dec6, dec7, dec8, dec9, dec10, dec11, dec12, dec13, dec14, dec15, dec16, dec17, dec18, dec19, dec20, dec21, dec22, dec23, dec24, dec25, dec26, dec27, dec28, dec29, dec30, dec31, dec32,dec33,dec34,dec35,dec36,dec37,dec38,dec39,dec40,dec41,dec42,dec43,dec44,dec45,dec46,dec47,dec48,dec49,dec50,dec51,dec52,dec53,dec54,dec55,dec56,dec57,dec58,dec59,dec60,dec61,dec62,dec63;                
//input[`SM_Width-1:0] sm0, sm1, sm2, sm3, sm4, sm5, sm6, sm7, sm8, sm9, sm10, sm11, sm12, sm13, sm14, sm15, sm16, sm17, sm18, sm19, sm20, sm21, sm22, sm23, sm24, sm25, sm26, sm27, sm28, sm29, sm30, sm31;
input [63:0] dec_list;
input [`W+`V+`U-1:0] dec_start_state;
//input [`SM_Width*64-1:0] sm_list;
input[`RAM_BYTE_WIDTH-1:0] rd_data;
output[`RAM_ADR_WIDTH-1:0] rd_adr;
output rd_en, wr_en;
output[`RAM_BYTE_WIDTH-1:0] wr_data;
output[`RAM_ADR_WIDTH-1:0] wr_adr;
output en_filo_in;
output[`V-1:0] filo_in;


reg[`RAM_BYTE_WIDTH-1:0] wr_data;
reg[`RAM_BYTE_WIDTH-1:0] wr_data_buf;
reg[`RAM_ADR_WIDTH-1:0] wr_adr;
reg en_filo_in;
reg[`V-1:0] filo_in;			// v cannot be less than 1
reg wr_en;
reg[`RAM_ADR_WIDTH-`U-1:0] rd_adr_col;
reg[`DUMMY_CNT_WIDTH-1:0] dummy_cnt;
reg Is_not_first_3blocks, During_traback, During_send_data;
reg[`W+`V+`U-1:0] state;

wire[`RAM_ADR_WIDTH-`U-1:0] dec_rd_adr;
wire[`V-1:0] rd_dec0, rd_dec1, rd_dec2, rd_dec3, rd_dec4, rd_dec5, rd_dec6, rd_dec7, rd_dec8, rd_dec9, rd_dec10, rd_dec11, rd_dec12, rd_dec13, rd_dec14, rd_dec15, rd_dec16, rd_dec17, rd_dec18, rd_dec19, rd_dec20, rd_dec21, rd_dec22, rd_dec23, rd_dec24, rd_dec25, rd_dec26, rd_dec27, rd_dec28, rd_dec29, rd_dec30, rd_dec31, rd_dec32, rd_dec33, rd_dec34, rd_dec35, rd_dec36, rd_dec37, rd_dec38, rd_dec39, rd_dec40, rd_dec41, rd_dec42, rd_dec43, rd_dec44, rd_dec45, rd_dec46, rd_dec47, rd_dec48, rd_dec49, rd_dec50, rd_dec51, rd_dec52, rd_dec53, rd_dec54, rd_dec55, rd_dec56, rd_dec57, rd_dec58, rd_dec59, rd_dec60, rd_dec61, rd_dec62, rd_dec63;            
wire[`W+`V+`U-1:0] next_state;
reg[`V-1:0] dec;
//wire[`U-1:0] rd_adr_byte;		// u cannot be less than 1
wire[`W+`V-1:0] rd_bit;
//!
//reg wr_rd_simu;
//reg[`RAM_BYTE_WIDTH-1:0] wr_data_dl;

wire[`RAM_ADR_WIDTH-`U-1:0] wire_rd_adr;
//wire[`U-1:0] next_rd_adr_byte;	
wire[`RAM_ADR_WIDTH-1:0] rd_adr_temp;	
//assign rd_adr_temp={wire_rd_adr_col, next_rd_adr_byte};
//assign rd_adr=(rd_adr_temp>191)?(rd_adr_temp-64):rd_adr_temp;
assign rd_adr=wire_rd_adr;
wire traceback_start, selectmini_flag, selectmini_flag_temp;

assign selectmini_flag=(dummy_cnt==`DUMMY_BLOCK_NUM&&wr_adr[`OUT_NUM_RADIX-1:0]==(`LEN-`OUT-2));
//assign selectmini_flag=traceback_start||selectmini_flag_temp;
assign traceback_start=(dummy_cnt==`DUMMY_BLOCK_NUM&&wr_adr[`OUT_NUM_RADIX-1:0]==(`LEN-`OUT-1));
assign rd_en= traceback_start || During_traback;
//assign next_rd_adr_byte=next_state[`W+`U-1:`W];
assign wire_rd_adr = dec_rd_adr;

assign {rd_dec0, rd_dec1, rd_dec2, rd_dec3, rd_dec4, rd_dec5, rd_dec6, rd_dec7, rd_dec8, rd_dec9, rd_dec10, rd_dec11, rd_dec12, rd_dec13, rd_dec14, rd_dec15, rd_dec16, rd_dec17, rd_dec18, rd_dec19, rd_dec20, rd_dec21, rd_dec22, rd_dec23, rd_dec24, rd_dec25, rd_dec26, rd_dec27, rd_dec28, rd_dec29, rd_dec30, rd_dec31, rd_dec32, rd_dec33, rd_dec34, rd_dec35, rd_dec36, rd_dec37, rd_dec38, rd_dec39, rd_dec40, rd_dec41, rd_dec42, rd_dec43, rd_dec44, rd_dec45, rd_dec46, rd_dec47, rd_dec48, rd_dec49, rd_dec50, rd_dec51, rd_dec52, rd_dec53, rd_dec54, rd_dec55, rd_dec56, rd_dec57, rd_dec58, rd_dec59, rd_dec60, rd_dec61, rd_dec62, rd_dec63} = rd_data;       ///////////////////////////////////////////////////
//assign dec_rd_adr_col=(rd_adr_col==0)?95:(rd_adr_col-1);
assign dec_rd_adr=(traceback_start?(wr_adr==31?95:(wr_adr-`OUT)):rd_adr_col-1);


//assign dec_rd_adr_col=(rd_adr_col-1);
assign rd_bit=state;
//assign next_state={state[`W+`U+`V-1:`V], dec};
//wire req_min_sm;

integer min_sm_num, i;
wire [`SM_Width-1:0]  min_sm_slice;

wire [`W+`V+`U-1:0]  min_sm_index;

//assign next_state = (wire_rd_adr_col==rd_adr_col)&&rd_en?  {state[`W+`U+`V-1:`V], dec}:min_sm_index;
//assign next_state=(traceback_start)?min_sm_index:{state[`W-1:0], dec};
assign next_state=(traceback_start)?dec_start_state:{state[`W-1:0], dec};

//wire [4:0] sm_list_index [15:0]={0,32,1,33,2,33,3,34,4,35,5,36,6,37,7,38,8,39,9,40,10,41,11,42,12,43,13,44,14,45,15,46};

//assign input_sum_array={sm0, sm1, sm2, sm3, sm4, sm5, sm6, sm7, sm8, sm9, sm10, sm11, sm12, sm13, sm14, sm15, sm16, sm17, sm18, sm19, sm20, sm21, sm22, sm23, sm24, sm25, sm26, sm27, sm28, sm29, sm30, sm31};

//reg start_trace_flag ;

// always @(posedge clk) 
// begin
		// //min_sm<=`MAX_PM;
        // for(i=0;i<`DEC_NUM;i=i+1)
			// begin
			// // if(sm_list[i*`SM_Width+:`SM_Width]<min_sm)
				// // begin
					// // min_sm<=sm_list[i*`SM_Width+:`SM_Width];
				// // end
			// $display("#%d: %d  ",i,sm_list[i*`SM_Width+:`SM_Width]);	
			// end
		// //min_sm<=sm_list[0*`SM_Width+:`SM_Width];	
		
// end	

//SelectMiniPM selectminiPM(.array(sm_list),.slice(0),.en_comp_in(selectmini_flag),.indexG(min_sm_index),.valueG(min_sm_slice));
// always @(posedge clk) 
// begin
	// //if(selectmini_flag_temp)
	// begin
		// //wr_data_buf<=wr_data;		
	// end
	
// end

always @(rd_bit or rd_dec0 or  rd_dec1 or  rd_dec2 or  rd_dec3 or  rd_dec4 or  rd_dec5 or  rd_dec6 or  rd_dec7 or  rd_dec8 or  rd_dec9 or  rd_dec10 or  rd_dec11 or  rd_dec12 or  rd_dec13 or  rd_dec14 or  rd_dec15 or  rd_dec16 or  rd_dec17 or  rd_dec18 or  rd_dec19 or  rd_dec20 or  rd_dec21 or  rd_dec22 or  rd_dec23 or  rd_dec24 or  rd_dec25 or  rd_dec26 or  rd_dec27 or  rd_dec28 or  rd_dec29 or  rd_dec30 or  rd_dec31 or  rd_dec32 or  rd_dec33 or  rd_dec34 or  rd_dec35 or  rd_dec36 or  rd_dec37 or  rd_dec38 or  rd_dec39 or  rd_dec40 or  rd_dec41 or  rd_dec42 or  rd_dec43 or  rd_dec44 or  rd_dec45 or  rd_dec46 or  rd_dec47 or  rd_dec48 or  rd_dec49 or  rd_dec50 or  rd_dec51 or  rd_dec52 or  rd_dec53 or  rd_dec54 or  rd_dec55 or  rd_dec56 or  rd_dec57 or  rd_dec58 or  rd_dec59 or  rd_dec60 or  rd_dec61 or  rd_dec62 or  rd_dec63)
begin
    case(rd_bit)
	6'd0: dec=rd_dec0; 
	6'd1: dec=rd_dec1; 
	6'd2: dec=rd_dec2; 
	6'd3: dec=rd_dec3; 
	6'd4: dec=rd_dec4; 
	6'd5: dec=rd_dec5; 
	6'd6: dec=rd_dec6; 
	6'd7: dec=rd_dec7; 
	6'd8: dec=rd_dec8; 
	6'd9: dec=rd_dec9; 
	6'd10: dec=rd_dec10; 
	6'd11: dec=rd_dec11; 
	6'd12: dec=rd_dec12; 
	6'd13: dec=rd_dec13; 
	6'd14: dec=rd_dec14; 
	6'd15: dec=rd_dec15; 
	6'd16: dec=rd_dec16; 
	6'd17: dec=rd_dec17; 
	6'd18: dec=rd_dec18; 
	6'd19: dec=rd_dec19; 
	6'd20: dec=rd_dec20; 
	6'd21: dec=rd_dec21; 
	6'd22: dec=rd_dec22; 
	6'd23: dec=rd_dec23; 
	6'd24: dec=rd_dec24; 
	6'd25: dec=rd_dec25; 
	6'd26: dec=rd_dec26; 
	6'd27: dec=rd_dec27; 
	6'd28: dec=rd_dec28; 
	6'd29: dec=rd_dec29; 
	6'd30: dec=rd_dec30; 
	6'd31: dec=rd_dec31; 
	6'd32: dec=rd_dec32;
	6'd33: dec=rd_dec33;
	6'd34: dec=rd_dec34;
	6'd35: dec=rd_dec35;
	6'd36: dec=rd_dec36;
	6'd37: dec=rd_dec37;
	6'd38: dec=rd_dec38;
	6'd39: dec=rd_dec39;
	6'd40: dec=rd_dec40;
	6'd41: dec=rd_dec41;
	6'd42: dec=rd_dec42;
	6'd43: dec=rd_dec43;
	6'd44: dec=rd_dec44;
	6'd45: dec=rd_dec45;
	6'd46: dec=rd_dec46;
	6'd47: dec=rd_dec47;
	6'd48: dec=rd_dec48;
	6'd49: dec=rd_dec49;
	6'd50: dec=rd_dec50;
	6'd51: dec=rd_dec51;
	6'd52: dec=rd_dec52;
	6'd53: dec=rd_dec53;
	6'd54: dec=rd_dec54;
	6'd55: dec=rd_dec55;
	6'd56: dec=rd_dec56;
	6'd57: dec=rd_dec57;
	6'd58: dec=rd_dec58;
	6'd59: dec=rd_dec59;
	6'd60: dec=rd_dec60;
	6'd61: dec=rd_dec61;
	6'd62: dec=rd_dec62;
	6'd63: dec=rd_dec63;	
	
    endcase
end

// if y denote the `OUT_NUM_RADIX-1 to 0 bits of write address, x denote the column 
// address(`RAM_ADR_WIDTH-1 to u) of write address, z denote the column address of read 
// address, then z = x-y-1
// if y>=0 && y<=(len-out-1) trace back
// if y>=(len-out) && y<=(len-1) send out
// if y>=len && y<=(`OUT_NUM-1)  wait for next trace back
// 
// x=wr_adr[`RAM_ADR_WIDTH-1:`U]
// y=wr_adr[`OUT_NUM_RADIX-1:0]
// z=rd_adr_col=rd_adr[`RAM_ADR_WIDTH-1:`U]

// there are four registers, one is wr_adr, the second is th wr_data, the third is 
// reg_rd_adr(and rd_en), the fourth is reg_valid_in. All the other outputs including 
// wr_en are combination out en_filo_in, en_filo_out and filo_in are registers too, 
// but they are not the major part.
// valid_in --->> wr_adr, wr_data, wr_en --->> rd_adr, rd_en
// rd_adr++rd_data --->> filo_in 

// always @(posedge clk or posedge rst)
// begin
	// if(rst)
		// begin   
			// //rd_en_dl<=0;
			// //wr_data_dl<=0;
			// //wr_rd_simu<=0;
			// min_sm_num<=0;
			// //start_trace_flag<=0;
		// end 
	// else if (srst)
		// begin   
			// //rd_en_dl<=0;
			// //wr_data_dl<=0;
			// //wr_rd_simu<=0;
			// min_sm_num<=0;
		// end
	// // else
		// // // begin
			// // // rd_en_dl<=rd_en;
			// // // if(wr_en&&(rd_en||rd_en_dl)&&wr_adr==rd_adr)
				// // // begin
					// // // wr_rd_simu<=1;
					// // // //wr_data_dl<=wr_data;
				// // // end
			// // // else
				// // // begin
					// // // wr_rd_simu<=0;
				// // // end
		// // // end
// end 
always @(posedge clk or posedge rst)
begin
    if(rst)
		begin
			dummy_cnt<=0;
			wr_data<=0;
			//wr_adr<=`OUT_NUM-1;
			wr_adr<=-1;
			wr_en<=0;
			rd_adr_col<=0;
			state<=0;
			
		//rd_adr_byte<=0;
			//rd_bit<=0;
			en_filo_in<=0;
			filo_in<=0;
			Is_not_first_3blocks<=0;
			During_traback<=0;
			During_send_data<=0;
		end
    else if (srst)
		begin
			dummy_cnt <= 0;
			wr_data <= 0;
			//wr_adr <= `OUT_NUM-1;
			wr_adr<=-1;
			wr_en <= 0;
			rd_adr_col <= 0;
			state <= 0;
			en_filo_in <= 0;
			filo_in <= 0;
			Is_not_first_3blocks <= 0;
			During_traback <= 0;
			During_send_data <= 0;
		end
    else if(valid_in)
		begin
			// if input is valid, we will always write decs into ram.
			wr_en<=1;
			// wr_data<={dec0, dec1, dec2, dec3, dec4, dec5, dec6, dec7, dec8, dec9, dec10, dec11, dec12, dec13, dec14, dec15, dec16, dec17, dec18, dec19, dec20, dec21, dec22, dec23, dec24, dec25, dec26, dec27, dec28, dec29, dec30, dec31,dec32,dec33,dec34,dec35,dec36,dec37,dec38,dec39,dec40,dec41,dec42,dec43,dec44,dec45,dec46,dec47,dec48,dec49,dec50,dec51,dec52,dec53,dec54,dec55,dec56,dec57,dec58,dec59,dec60,dec61,dec62,dec63};
			wr_data<=dec_list;	
				
			if(wr_adr==95)
				wr_adr<=0;
			else
				wr_adr<=wr_adr+1; 
			
			// if during trace back
			// if(During_traback&&Is_not_first_3blocks)   
				// begin
					// // Trace back. Do three things: write decs to ram , read read decs from 
					// // ram for generate next read address and send data to filo
					// en_filo_in<=1;
					// filo_in<=rd_bit[5:5];
					// rd_adr_col<=dec_rd_adr;
					// state<=next_state;
					// // scratch
					// // {rd_adr_byte, rd_bit}<={rd_adr_byte[`U-`V-1:0], rd_bit[`W+`V-1:`V], dec, rd_adr_byte[`U-1:`U-`V]};       
					// // {rd_adr_byte, rd_bit}<={rd_bit[`W+`V-1:`V], dec, rd_adr_byte[`U-1:`U-`V]};    
					// // 
				// end
			
			// decide whether send data to filo
			// if have trace back enough bits, we can send out dec
			// if((wr_adr[`OUT_NUM_RADIX-1:0]==`LEN-`OUT-1) && Is_not_first_3blocks)
				// begin
					// // Trace back and send out dec to filo
					// en_filo_in<=1;
					// During_send_data<=1;
				// end
			// else if have send out all data, stop send data
			// else if((wr_adr[`OUT_NUM_RADIX-1:0]==`LEN-1) && Is_not_first_3blocks)
				// begin
					// // For the abnormal condition `LEN==`OUT_NUM
					// en_filo_in<=1;
					// During_send_data<=0;
				// end 
			// else
				// en_filo_in<=During_send_data;
			
			// decide whether begin a trace or stop a trace
			
			if(During_traback&&Is_not_first_3blocks)   
				begin
					// Trace back. Do three things: write decs to ram , read read decs from 
					// ram for generate next read address and send data to filo
					en_filo_in<=1;
					filo_in<=rd_bit[5:5];
					rd_adr_col<=dec_rd_adr;
					state<=next_state;
					// scratch
					// {rd_adr_byte, rd_bit}<={rd_adr_byte[`U-`V-1:0], rd_bit[`W+`V-1:`V], dec, rd_adr_byte[`U-1:`U-`V]};       
					// {rd_adr_byte, rd_bit}<={rd_bit[`W+`V-1:`V], dec, rd_adr_byte[`U-1:`U-`V]};    
					// 
				end
				
			else if(wr_adr[`OUT_NUM_RADIX-1:0]==`LEN-`OUT-1)
				begin
					// Initialize a trace action
					if(dummy_cnt==`DUMMY_BLOCK_NUM)   // It is already not the dummy block, so dont add it
						begin
							Is_not_first_3blocks<=1;
							During_traback<=1;
							//rd_adr_col<=(wr_adr==31?94:(wr_adr[`RAM_ADR_WIDTH-1:`U]-`OUT-1));
							rd_adr_col<=dec_rd_adr;
							state<=next_state;    //{(`U-`V)'b0, `W'b0, `V'b0, `V'b0};    ////////////////////
							
							//en_filo_in<=1;
							During_send_data<=1;
					
							//min_sm_reg<=min_sm;
							//min_sm_index_reg<=min_sm_index;
							//en_com_in=1;
						end
					else
						dummy_cnt<=dummy_cnt+1;
				end
			
			// else if we have trace back to the end
			// else 
				// if(wr_adr[`OUT_NUM_RADIX-1:0]==`LEN-1)
					// During_traback<=0;
		end
    else    // input decs are not valid                  
		begin
			// Hold the right values
			wr_en<=0;
			en_filo_in<=0;
		end
end

// some scratch
// {next_rd_adr_byte,next_rd_adr_bit}={rd_adr_byte[`U-`V-1:0],rd_adr_bit[`W+`V-1:`V],dec, rd_adr_byte[`U-1:`U-`V]};  
// {wire_rd_adr_byte, wire_rd_bit}={rd_adr_byte[`U-`V-1:0], rd_bit[`W+`V-1:`V], dec, rd_adr_byte[`U-1:`U-`V]};       
//
endmodule
