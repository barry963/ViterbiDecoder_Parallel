///////////////////////////////////////////////////////////////////
         //////                                    //////
///////////////////////////////////////////////////////////////////
///                                                             ///
/// This file is generated by Viterbi HDL Code Generator(VHCG)  ///
/// which is written by Mike Johnson at OpenCores.org  and      ///
/// distributed under GPL license.                              ///
///                                                             ///
/// If you have any advice,                                     ///
/// please email to jhonson.zhu@gmail.com                       ///
///                                                             ///
///////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////




//This is a head

`include "glb_def.v"
///////////////////////////////////////////////////////////////////

module brameter2(state_cluster, symbol0, symbol1, pattern, bm00, bm01, bm10, bm11);
parameter Bit_Width=`Bit_Width;
parameter BM_Width=`BM_Width;
input[4:0] state_cluster;
input signed [Bit_Width-1:0] symbol0, symbol1;
input[`SYMBOLS_NUM-1:0] pattern;
output[BM_Width-1:0] bm00, bm01, bm10, bm11;
reg[BM_Width-1:0] bm00, bm01, bm10, bm11;

reg signed [Bit_Width-1:0] bm00_0, bm00_1;
reg signed [Bit_Width-1:0] bm01_0, bm01_1;
reg signed [Bit_Width-1:0] bm10_0, bm10_1;
reg signed [Bit_Width-1:0] bm11_0, bm11_1;

reg signed [Bit_Width-1:0] pn_bm00_0, pn_bm00_1;
reg signed [Bit_Width-1:0] pn_bm01_0, pn_bm01_1;
reg signed [Bit_Width-1:0] pn_bm10_0, pn_bm10_1;
reg signed [Bit_Width-1:0] pn_bm11_0, pn_bm11_1;

wire[1:0] common_part;
wire[6:0] a;
assign a={1'b0,state_cluster,1'b0};
assign common_part[0] = a[4]^a[3]^a[1];
assign common_part[1] = a[5]^a[4]^a[3];

always @(common_part or pattern or symbol0 or symbol1)
begin
	if(common_part[0])
		begin
			bm00_0=symbol0;//- 0 0 -
			bm01_0=-symbol0;
			bm10_0=-symbol0;
			bm11_0=symbol0;
		end
	else
		begin
			bm00_0=-symbol0;//0 - - 0
			bm01_0=symbol0;
			bm10_0=symbol0;
			bm11_0=-symbol0;
		end

	if(common_part[1])
		begin
			bm00_1=symbol1;//- 0 0 -
			bm01_1=-symbol1;
			bm10_1=-symbol1;
			bm11_1=symbol1;
		end
	else
		begin
			bm00_1=-symbol1;//0 - - 0
			bm01_1=symbol1;
			bm10_1=symbol1;
			bm11_1=-symbol1;
		end

	if(pattern[0]==1)
		begin
			pn_bm00_0=bm00_0;
			pn_bm01_0=bm01_0;
			pn_bm10_0=bm10_0;
			pn_bm11_0=bm11_0;
		end
	else
		begin
			pn_bm00_0=0;
			pn_bm01_0=0;
			pn_bm10_0=0;
			pn_bm11_0=0;
		end

	if(pattern[1]==1)
		begin
			pn_bm00_1=bm00_1;
			pn_bm01_1=bm01_1;
			pn_bm10_1=bm10_1;
			pn_bm11_1=bm11_1;
		end
	else
		begin
			pn_bm00_1=0;
			pn_bm01_1=0;
			pn_bm10_1=0;
			pn_bm11_1=0;
		end

end
always @(pn_bm00_0 or pn_bm00_1 or pn_bm01_0 or pn_bm01_1 or pn_bm10_0 or pn_bm10_1 or pn_bm11_0 or pn_bm11_1)
	begin
		bm00=((pn_bm00_0+pn_bm00_1)>>1)+`MAX_INPUT;
		bm01=((pn_bm01_0+pn_bm01_1)>>1)+`MAX_INPUT;
		bm10=((pn_bm10_0+pn_bm10_1)>>1)+`MAX_INPUT;
		bm11=((pn_bm11_0+pn_bm11_1)>>1)+`MAX_INPUT;
		//$display("bm00: %d\n",((pn_bm00_0+pn_bm00_1)>>1)+7);
	end	

endmodule
